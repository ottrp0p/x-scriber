import os
import tempfile
from unittest.mock import patch, MagicMock
from django.test import TestCase
from xscriber.modules.chat_completion import ChatCompletionProcessor


class ChatCompletionProcessorTests(TestCase):
    def setUp(self):
        self.processor = ChatCompletionProcessor(api_key="test_api_key")

    def test_init_with_api_key(self):
        processor = ChatCompletionProcessor(api_key="test_key")
        self.assertEqual(processor.api_key, "test_key")
        self.assertEqual(processor.model, "gpt-3.5-turbo")

    def test_init_without_api_key_raises_error(self):
        with patch('django.conf.settings.OPENAI_API_KEY', None):
            with self.assertRaises(ValueError):
                ChatCompletionProcessor()

    def test_parse_trd_ontology_empty(self):
        ontology = self.processor.parse_trd_ontology("")
        self.assertEqual(len(ontology), 8)
        for section in ontology.values():
            self.assertEqual(section, "")

    def test_parse_trd_ontology_with_content(self):
        trd_content = """# Overview
This is the overview section

# Requirements
- Requirement 1
- Requirement 2

# Technical Specifications
Technical details here
"""
        ontology = self.processor.parse_trd_ontology(trd_content)
        self.assertEqual(ontology["overview"], "This is the overview section")
        self.assertEqual(ontology["requirements"], "- Requirement 1\n- Requirement 2")
        self.assertEqual(ontology["technical_specs"], "Technical details here")

    @patch('xscriber.modules.chat_completion.openai.OpenAI')
    def test_update_trd_section_success(self, mock_openai):
        mock_client = MagicMock()
        mock_openai.return_value = mock_client

        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Updated section content"
        mock_client.chat.completions.create.return_value = mock_response

        processor = ChatCompletionProcessor(api_key="test_key")
        result = processor.update_trd_section("overview", "Old content", "New transcription")

        self.assertEqual(result, "Updated section content")
        mock_client.chat.completions.create.assert_called_once()

    def test_generate_trd_document(self):
        ontology = {
            "overview": "Test overview",
            "requirements": "Test requirements",
            "technical_specs": "Test specs",
            "architecture": "Test architecture",
            "constraints": "Test constraints",
            "assumptions": "Test assumptions",
            "acceptance_criteria": "Test criteria",
            "dependencies": "Test dependencies"
        }

        result = self.processor.generate_trd_document(ontology)
        self.assertIn("# Technical Requirements Document", result)
        self.assertIn("Test overview", result)
        self.assertIn("Test requirements", result)
        self.assertIn("Generated by X-Scriber", result)

    def test_save_trd_document_success(self):
        trd_content = "# Test TRD Document\nContent here"

        with tempfile.NamedTemporaryFile(suffix='.md', delete=False) as temp_file:
            temp_path = temp_file.name

        try:
            result = self.processor.save_trd_document(trd_content, temp_path)
            self.assertTrue(result)

            with open(temp_path, 'r') as f:
                saved_content = f.read()

            self.assertEqual(saved_content, trd_content)
        finally:
            os.unlink(temp_path)

    @patch('xscriber.modules.chat_completion.openai.OpenAI')
    def test_process_transcription_to_trd_new(self, mock_openai):
        mock_client = MagicMock()
        mock_openai.return_value = mock_client

        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Updated content"
        mock_client.chat.completions.create.return_value = mock_response

        processor = ChatCompletionProcessor(api_key="test_key")
        result = processor.process_transcription_to_trd("New transcription")

        self.assertIn("# Technical Requirements Document", result)
        self.assertIn("Generated by X-Scriber", result)

    @patch('xscriber.modules.chat_completion.openai.OpenAI')
    def test_process_transcription_to_trd_update_existing(self, mock_openai):
        mock_client = MagicMock()
        mock_openai.return_value = mock_client

        mock_response = MagicMock()
        mock_response.choices[0].message.content = "Updated content"
        mock_client.chat.completions.create.return_value = mock_response

        existing_trd = """# Technical Requirements Document

## Overview
Existing overview

## Requirements
Existing requirements
"""

        processor = ChatCompletionProcessor(api_key="test_key")
        result = processor.process_transcription_to_trd("New transcription", existing_trd)

        self.assertIn("# Technical Requirements Document", result)
        self.assertIn("Generated by X-Scriber", result)